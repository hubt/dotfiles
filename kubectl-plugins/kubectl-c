#!/usr/bin/env python3
# bugs to http://github.com/hubt

import os,sys,yaml,subprocess,shlex

def shell(cmd):
  return subprocess.check_output(shlex.split(cmd))

def set_context(name):
  cmd = "kubectl config use-context " + name
  print("Executing command:\n  " + cmd)
  try:
    shell(cmd)
  except:
    print("Unable to switch context to " + name + ". Make sure that it exists")
  
def create_context():
  config = yaml.load(open(os.environ['HOME'] + "/.kube/config"),Loader=yaml.FullLoader)
  
  
# passed in parameter, use it as the context to set
if len(sys.argv) == 2:
  if sys.argv[1] == "-c":
    create_context()
  else:
    set_context(sys.argv[1])
  sys.exit(0)

# otherwise bring up a menu
  
config = yaml.load(open(os.environ['HOME'] + "/.kube/config"),Loader=yaml.FullLoader)
contexts = config['contexts']
# sort by cluster/namespace
no_namespace="none"
contexts.sort(key=lambda c: c['context']['cluster'] + " "+ (c['context']['namespace'] if 'namespace' in c['context'] else no_namespace ))
i = 1
context_lines = []
table = [ [ "","#","CONTEXT","CLUSTER","NAMESPACE" ] ]
for x in contexts:
  current = ""
  if 'namespace' in x['context']:
    ns = x['context']['namespace']
  else: 
    ns = no_namespace
  if x['name'] == config['current-context']:
    current = True
  else:
    current = False
  row = [ current,str(i),x['name'],x['context']['cluster'], ns ]
  table.append(row)
  i += 1

# build an array of the max widths for each field
widths = [0] * len(table[0])
for r in table:
  for i in range(1,len(r)):
    if len(r[i]) > widths[i]:
      widths[i] = len(r[i])
# the first element is a boolean flag of the current config
widths.pop(0)

# build the string
fstring = str.join(" ",map(lambda a: "{:<" + str(a) + "}",widths))
# add green color to the format string for the current context
cstring = u"\u001b[32m" + fstring + u"\u001b[0m"
for r in table:
  is_current = r.pop(0)
  if is_current == True:
    print(cstring.format(*r))
  else:
    print(fstring.format(*r))

if "current-context" in config:
  print("\nCurrent context: " + config['current-context'])

print("Set Context (1-{0} or name): ".format(len(table)-1))
try: 
  new_context = sys.stdin.readline()[0:-1]
except KeyboardInterrupt:
  sys.exit(1)
if new_context.strip() == '':
  print("No change")
  sys.exit(0)
context_list = list(filter(lambda c: c['name'] == new_context, contexts))
if len(context_list) > 0:
  context_name = context_list[0]['name']
else:
  c = int(new_context) - 1
  if c < 0 or c > len(contexts) - 1:
    print("Context {} out of range".format(new_context))
    sys.exit(1)
  context_name = contexts[c]
  context_name = contexts[c]['name'] 
  print("Setting context to {0}".format(context_name))
set_context(context_name)  

