#!/bin/sh

# run this on a pod inside the cluster to test whether dns is being slow 
url=www.google.com
sleep_time=.1
iterations=100

# fetch kube-dns pod IPs(works from within cluster)
pod_output=$(curl -s -X GET "https://kubernetes.default.svc/api/v1/namespaces/kube-system/pods?labelSelector=k8s-app%3Dkube-dns" \
         -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
         -H 'Accept: application/json' \
         --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)
ips=$( echo "$pod_output" | grep -o '"podIP": *"[^"]*' | sed 's/"podIP": *"//')
if [ "$ips" = "" ] ; then
    echo "$pod_output"
    echo "Error retrieving kube-dns pods"
    exit 1
fi

set -e
set -o pipefail
test_dns_curl() {
  curl --dns-servers $ip -k -s -S -o /dev/null -w  "URL:\t\t\t%{http_code} %{url_effective}\nDNS Lookup time:\t%{time_namelookup}\nTCP Connect:\t\t%{time_connect}\nTotal Time:\t\t%{time_total}\n" -H "Pragma: no-cache" $url
}

test_dns_nslookup() {
  time nslookup $url $ip
}

test_dns_dig() {
  time dig @${ip} $url
}


if [ "$(curl -V| grep AsynchDNS)" != "" ] ; then
  test_dns=test_dns_curl
elif [ "$(which nslookup)" !- "" ] ; then
  test_dns=test_dns_nslookup
elif [ "$(which dig)" !- "" ] ; then
  test_dns=test_dns_dig
else
  echo "$0 needs curl with AsynchDNS, nslookup, or dig"
  exit 1
fi

i=1; while [ $i -le $iterations ] ; do
    for ip in $ips; do
        echo "=== Testing DNS IP: $ip"
        $test_dns
        echo
    done
    sleep $sleep_time
    i=$((i+1))
done

